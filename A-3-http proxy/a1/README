================================================================

    README file for Assignment 1 - HTTP Proxy

           Name: 曾海洋
 Username/Login: 8208230617
 
================================================================

程序设计与实现
本HTTP代理服务器实现了以下核心功能：

基本HTTP代理功能：能够接收客户端HTTP请求，转发到目标服务器，然后将服务器响应返回给客户端。
并发处理：通过fork()系统调用为每个新的客户端请求创建子进程，支持多客户端并发连接，并限制最大进程数为100。
请求解析：使用提供的解析库对请求头进行解析，支持解析绝对URL。
错误处理：实现了完整的错误处理机制，包括对400（错误请求）、501（未实现）、502（错误网关）和500（服务器内部错误）等HTTP错误状态的处理。
僵尸进程处理：通过SIGCHLD信号处理机制回收子进程资源，避免僵尸进程。

设计决策

缓冲区设计：

使用固定大小缓冲区（8192字节）接收请求和响应，在实际应用中表现良好。
实现了递增读取机制，确保可以完整接收HTTP请求，直到检测到请求结束的"\r\n\r\n"标记。


连接处理：

使用getaddrinfo()函数代替传统的gethostbyname()，提供更好的DNS解析能力。
对于未指定端口的URL，默认使用HTTP标准端口80。


头部处理：

确保转发的请求包含Host头部（如果原始请求中没有）。
添加Connection: close头部以确保HTTP/1.0连接正确关闭。


错误恢复：

在网络操作失败时能够优雅地恢复，关闭相关连接并给客户端返回适当的错误信息。



主要函数说明

main(): 初始化服务器，创建套接字，绑定端口，接受连接并创建子进程处理请求。
handle_client(): 处理单个客户端的核心函数，读取请求，解析，转发，并返回响应。
connect_to_server(): 建立与目标服务器的连接。
forward_request(): 将修改后的HTTP请求发送给目标服务器。
forward_response(): 将目标服务器的响应转发回客户端。
read_request(): 读取完整的HTTP请求，直到遇到"\r\n\r\n"。
send_error(): 生成并发送HTTP错误响应。
handle_sigchld(): 处理子进程退出信号，防止僵尸进程。

测试与验证
代理服务器已通过以下测试：

使用telnet命令手动测试基本功能
使用提供的测试脚本验证并发性能
使用Firefox浏览器配置代理服务器进行实际网页浏览测试

运行方法

编译程序：
make

运行代理服务器：
./proxy <端口号>

配置浏览器使用此代理服务器
测试方法：
- 使用telnet进行基本功能测试
- 使用提供的测试脚本进行自动化测试
- 配置Firefox浏览器测试实际网页访问
